import { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { Spinner, Card, Badge, Form } from "react-bootstrap";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faSearch } from "@fortawesome/free-solid-svg-icons";
import blogApi from "../../../api/blogApi";
import { getStorageUrl } from "../../../utils/getStorageUrl";
import "../../../styles/student/blogs/blogs.css";

const Blogs = () => {
  const [blogs, setBlogs] = useState([]);
  const [filteredBlogs, setFilteredBlogs] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [searchTerm, setSearchTerm] = useState("");
  const [dateFilter, setDateFilter] = useState(""); // L·ªçc theo ng√†y

  useEffect(() => {
    const fetchBlogs = async () => {
      try {
        const response = await blogApi.getBlogs();
        console.log("Blogs:", response.data);
        setBlogs(response.data);
        setFilteredBlogs(response.data);
        setLoading(false);
      } catch (err) {
        console.error("L·ªói khi l·∫•y danh s√°ch blog:", err);
        setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu blog.");
        setLoading(false);
      }
    };

    fetchBlogs();
  }, []);

  useEffect(() => {
    const filterBlogs = () => {
      let filtered = blogs;

      // L·ªçc theo t·ª´ kh√≥a t√¨m ki·∫øm trong ti√™u ƒë·ªÅ
      if (searchTerm) {
        filtered = filtered.filter((blog) =>
          blog.title.toLowerCase().includes(searchTerm.toLowerCase())
        );
      }

      // L·ªçc theo ng√†y (1 tu·∫ßn, 3 tu·∫ßn, 1 th√°ng, t·∫•t c·∫£)
      if (dateFilter) {
        const today = new Date();
        let dateLimit;

        if (dateFilter === "1week") {
          dateLimit = new Date(today.setDate(today.getDate() - 7)); // 1 tu·∫ßn
        } else if (dateFilter === "3weeks") {
          dateLimit = new Date(today.setDate(today.getDate() - 21)); // 3 tu·∫ßn
        } else if (dateFilter === "1month") {
          dateLimit = new Date(today.setMonth(today.getMonth() - 1)); // 1 th√°ng
        }

        if (dateFilter !== "all") {
          filtered = filtered.filter(
            (blog) => new Date(blog.created_at) >= dateLimit
          );
        }
      }

      setFilteredBlogs(filtered);
    };

    filterBlogs();
  }, [searchTerm, dateFilter, blogs]);

  if (loading)
    return (
      <div className="loading-container">
        <Spinner
          animation="border"
          variant="danger"
        />
        <p>ƒêang t·∫£i blog...</p>
      </div>
    );

  if (error) return <div className="error-message">{error}</div>;

  return (
    <div className="blogs">
      <h1 className="blogs__page-title">Blog h·ªçc t·∫≠p</h1>

      {/* T√¨m ki·∫øm */}
      <div className="blogs__controls d-flex align-items-center gap-3 mb-4">
        <div className="blogs__search-box position-relative flex-grow-1">
          <Form.Control
            type="text"
            placeholder="T√¨m ki·∫øm blog..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="blogs__search-input"
          />
          <FontAwesomeIcon
            icon={faSearch}
            className="blogs__search-icon"
          />
        </div>

        <div className="blogs__filter-box">
          <Form.Select
            value={dateFilter}
            onChange={(e) => setDateFilter(e.target.value)}
            className="blogs__filter-select"
          >
            <option value="all">üóÇÔ∏è T·∫•t c·∫£</option>
            <option value="1week">üïí 1 tu·∫ßn g·∫ßn ƒë√¢y</option>
            <option value="3weeks">üïí 3 tu·∫ßn g·∫ßn ƒë√¢y</option>
            <option value="1month">üìÖ 1 th√°ng g·∫ßn ƒë√¢y</option>
          </Form.Select>
        </div>
      </div>

      <div className="blogs__intro">
        <p>
          T·ªïng h·ª£p c√°c th√¥ng b√°o m·ªõi nh·∫•t, b√†i vi·∫øt h∆∞·ªõng d·∫´n h·ªçc t·∫≠p, c√°c h·ªá
          th·ªëng ki·∫øn th·ª©c v√† b√†i ph·ªèng v·∫•n gi·∫£ng vi√™n. Gi√∫p b·∫°n h·ªçc t·ªët v√† th√∫
          v·ªã h∆°n.
        </p>
      </div>

      <div className="blogs__list">
        {filteredBlogs.map((blog) => {
          const isNew =
            new Date(blog.created_at) >
            new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);

          return (
            <Link
              to={`/student/blogs/${blog.id}`}
              key={blog.id}
              className="blogs__link"
            >
              <Card className="blogs__card">
                {isNew && (
                  <Badge
                    pill
                    bg="danger"
                    className="blogs__ribbon"
                  >
                    M·ªõi
                  </Badge>
                )}
                <Card.Img
                  variant="top"
                  src={
                    blog.images?.[0]?.image
                      ? getStorageUrl(blog.images[0].image)
                      : "/images/default-thumbnail.jpg"
                  }
                  alt={blog.title}
                  className="blogs__image"
                />
                <Card.Body className="blogs__info">
                  <Card.Title className="blogs__title">{blog.title}</Card.Title>
                  <Card.Text className="blogs__meta">
                    T√°c gi·∫£: {blog.author?.name} | Ng√†y ƒëƒÉng:{" "}
                    {new Date(blog.created_at).toLocaleDateString("vi-VN")}
                  </Card.Text>
                  <Card.Text className="blogs__description">
                    {blog.content.slice(0, 150)}...
                  </Card.Text>
                </Card.Body>
              </Card>
            </Link>
          );
        })}
      </div>
    </div>
  );
};

export default Blogs;
