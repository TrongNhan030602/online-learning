import { useParams, useNavigate } from "react-router-dom";
import { useEffect, useState } from "react";
import dayjs from "dayjs";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faEdit, faTrash, faUserPlus } from "@fortawesome/free-solid-svg-icons";
import classApi from "../../../api/classApi";
import sessionApi from "../../../api/sessionApi";
import enrollmentApi from "../../../api/enrollmentApi";
import { useToast } from "../../../hooks/useToast";
import { getStorageUrl } from "../../../utils/getStorageUrl";
import ConfirmDialog from "../../../components/Common/ConfirmDialog";
import AddSessionModal from "../../../components/Sessions/AddSessionModal";
import EditSessionModal from "../../../components/Sessions/EditSessionModal";
import AddLessonModal from "../../../components/Sessions/AddLessonModal";
import DeleteLessonModal from "../../../components/Sessions/DeleteLessonModal";
import AddStudentModal from "../../../components/DisciplineScores/AddStudentModal";

import "../../../styles/classes/class-detail.css";

const DisciplineScoresDetail = () => {
  const { addToast } = useToast();
  const { id } = useParams();
  const navigate = useNavigate();
  const [classData, setClassData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedSession, setSelectedSession] = useState(null);
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState({
    isOpen: false,
    message: "",
    onConfirm: () => {},
    onCancel: () => {},
  });

  const [selectedSessionForLesson, setSelectedSessionForLesson] =
    useState(null);
  const [isLessonModalOpen, setIsLessonModalOpen] = useState(false);
  const [isDeleteLessonModalOpen, setIsDeleteLessonModalOpen] = useState(false);
  const [sessionForDeletingLesson, setSessionForDeletingLesson] =
    useState(null);
  const [showAddStudentModal, setShowAddStudentModal] = useState(false);

  useEffect(() => {
    classApi
      .getClassById(id)
      .then((res) => {
        setClassData(res.data);
        setLoading(false);
      })
      .catch((err) => {
        console.error("L·ªói khi l·∫•y chi ti·∫øt l·ªõp h·ªçc:", err);
        setLoading(false);
      });
  }, [id]);

  const formatDate = (dateStr) => dayjs(dateStr).format("DD/MM/YYYY");
  const formatTime = (timeStr) => timeStr?.substring(0, 5);

  const toggleModal = () => setIsModalOpen(!isModalOpen);

  // C·∫≠p nh·∫≠t l·∫°i danh s√°ch bu·ªïi h·ªçc khi th√™m m·ªõi v√† hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
  const handleSessionAdded = (newSession) => {
    setClassData((prevData) => ({
      ...prevData,
      sessions: [...prevData.sessions, newSession],
    }));

    addToast({
      title: "Th√†nh c√¥ng!",
      message: "Bu·ªïi h·ªçc ƒë√£ ƒë∆∞·ª£c th√™m.",
      type: "success",
      duration: 2000,
    });
  };

  // M·ªü modal ch·ªânh s·ª≠a bu·ªïi h·ªçc
  const handleEditSession = (session) => {
    setSelectedSession(session);
    setIsEditModalOpen(true);
  };

  // M·ªü modal x√°c nh·∫≠n x√≥a bu·ªïi h·ªçc
  const handleDeleteSession = (session) => {
    setSelectedSession(session);
    setIsDeleteModalOpen(true); // M·ªü modal x√°c nh·∫≠n
  };
  // M·ªü modal x√≥a b√†i h·ªçc
  const handleDeleteLesson = (session) => {
    setSessionForDeletingLesson(session);
    setIsDeleteLessonModalOpen(true);
  };

  // X·ª≠ l√Ω x√≥a bu·ªïi h·ªçc khi x√°c nh·∫≠n
  const handleConfirmDeleteSession = async () => {
    try {
      await sessionApi.deleteSession(id, selectedSession.id);

      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch bu·ªïi h·ªçc sau khi x√≥a
      setClassData((prevData) => ({
        ...prevData,
        sessions: prevData.sessions.filter(
          (session) => session.id !== selectedSession.id
        ),
      }));
      addToast({
        title: "Th√†nh c√¥ng!",
        message: "Bu·ªïi h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a.",
        type: "success",
        duration: 3000,
      });
      // ƒê√≥ng modal sau khi x√≥a
      setIsDeleteModalOpen(false);
    } catch (error) {
      console.error("L·ªói khi x√≥a bu·ªïi h·ªçc:", error);
    }
  };
  const handleAddLesson = (session) => {
    setSelectedSessionForLesson(session);
    setIsLessonModalOpen(true);
  };
  const handleDeleteEnrollment = (enrollmentId) => {
    // M·ªü ConfirmDialog v·ªõi th√¥ng ƒëi·ªáp x√°c nh·∫≠n x√≥a h·ªçc vi√™n
    setShowConfirmDialog({
      isOpen: true,
      message: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën xo√° h·ªçc vi√™n n√†y kh·ªèi l·ªõp?",
      onConfirm: async () => {
        try {
          // G·ªçi API x√≥a h·ªçc vi√™n
          await enrollmentApi.remove(enrollmentId);

          // C·∫≠p nh·∫≠t l·∫°i danh s√°ch h·ªçc vi√™n sau khi x√≥a
          setClassData((prevData) => ({
            ...prevData,
            students: prevData.students.filter(
              (student) => student.pivot.id !== enrollmentId
            ),
          }));

          addToast({
            title: "Th√†nh c√¥ng!",
            message: "H·ªçc vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi l·ªõp.",
            type: "success",
            duration: 3000,
          });
        } catch (error) {
          console.error("L·ªói khi x√≥a h·ªçc vi√™n:", error);
          addToast({
            title: "Th·∫•t b·∫°i!",
            message: "Kh√¥ng th·ªÉ x√≥a h·ªçc vi√™n. Th·ª≠ l·∫°i sau.",
            type: "error",
            duration: 3000,
          });
        }
        // ƒê√≥ng ConfirmDialog sau khi x√≥a
        setShowConfirmDialog({ isOpen: false });
      },
      onCancel: () => {
        // ƒê√≥ng ConfirmDialog n·∫øu ng∆∞·ªùi d√πng t·ª´ ch·ªëi
        setShowConfirmDialog({ isOpen: false });
      },
    });
  };

  if (loading) return <div className="class-detail__loading">ƒêang t·∫£i...</div>;
  if (!classData)
    return <div className="class-detail__error">Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.</div>;

  const {
    name,
    max_students,
    status,
    start_date,
    end_date,
    course,
    students,
    sessions,
  } = classData;
  const reloadClassData = () => {
    classApi
      .getClassById(id)
      .then((res) => setClassData(res.data))
      .catch((err) =>
        console.error("L·ªói khi reload l·ªõp h·ªçc sau khi c·∫≠p nh·∫≠t b√†i h·ªçc:", err)
      );
  };

  return (
    <div className="class-detail">
      <button
        className="class-detail__back-btn"
        onClick={() => navigate(-1)}
      >
        Quay l·∫°i
      </button>

      <h1 className="class-detail__title">{name}</h1>

      <div className="class-detail__section class-detail__info">
        <p>
          <strong>Kh√≥a h·ªçc:</strong> {course?.title}
        </p>
        {course?.image_url && (
          <img
            src={getStorageUrl(course.image_url)}
            alt={course.title}
            className="class-detail__course-img"
          />
        )}
        <p>
          <strong>Tr·∫°ng th√°i:</strong> {status}
        </p>
        <p>
          <strong>Th·ªùi gian:</strong> {formatDate(start_date)} ‚Üí{" "}
          {formatDate(end_date)}
        </p>
        <p>
          <strong>Sƒ© s·ªë:</strong> {students?.length}/{max_students}
        </p>
      </div>

      <div className="class-detail__section">
        <div className="class-detail__header">
          <h2 className="class-detail__subtitle">
            Danh s√°ch h·ªçc vi√™n ({students?.length || 0})
          </h2>
          <button
            className="class-detail__add-btn"
            onClick={() => setShowAddStudentModal(true)}
            title="Th√™m h·ªçc vi√™n"
          >
            <FontAwesomeIcon icon={faUserPlus} /> Th√™m
          </button>
        </div>

        {students?.length > 0 ? (
          <ul className="class-detail__list">
            {students.map((s) => (
              <li
                key={s.id}
                className="class-detail__student"
              >
                üë§ {s.name} - {s.email}
                {/* Button x√≥a h·ªçc vi√™n */}
                <button
                  className="btn btn-danger btn-sm ms-2"
                  onClick={() => handleDeleteEnrollment(s.pivot.id)} // G·ªçi h√†m xo√° v·ªõi pivot.id
                  title="Xo√° h·ªçc vi√™n"
                >
                  <FontAwesomeIcon icon={faTrash} />
                </button>
              </li>
            ))}
          </ul>
        ) : (
          <p>Kh√¥ng c√≥ h·ªçc vi√™n trong l·ªõp h·ªçc n√†y.</p>
        )}
      </div>

      <div className="class-detail__section">
        <div className="class-detail__header">
          <h2 className="class-detail__subtitle">
            L·ªãch h·ªçc ({sessions?.length || 0})
          </h2>
          <button
            onClick={toggleModal}
            className="class-detail__add-btn"
          >
            Th√™m bu·ªïi h·ªçc
          </button>
        </div>
        {sessions?.length > 0 ? (
          <table className="class-detail__table">
            <thead>
              <tr>
                <th>#</th>
                <th>Ng√†y h·ªçc</th>
                <th>Ti√™u ƒë·ªÅ</th>
                <th>Th·ªùi gian</th>
                <th>H√†nh ƒë·ªông</th>
              </tr>
            </thead>

            <tbody>
              {sessions.map((session, index) => (
                <tr
                  key={session.id}
                  className="class-detail__table-row"
                >
                  <td>{index + 1}</td>
                  <td>{formatDate(session.session_date)}</td>
                  <td>{session.title}</td>
                  <td>
                    {formatTime(session.start_time)} ‚Üí{" "}
                    {formatTime(session.end_time)}
                  </td>
                  <td className="class-detail__table-actions">
                    <button
                      className="class-detail__action-btn class-detail__action-btn--edit"
                      onClick={() => handleEditSession(session)}
                    >
                      <FontAwesomeIcon icon={faEdit} />
                    </button>
                    <button
                      className="class-detail__action-btn class-detail__action-btn--delete"
                      onClick={() => handleDeleteSession(session)}
                    >
                      <FontAwesomeIcon icon={faTrash} />
                    </button>
                    <button
                      className="class-detail__action-btn class-detail__action-btn--add-lesson"
                      onClick={() => handleAddLesson(session)}
                      title="Th√™m b√†i h·ªçc"
                    >
                      ‚ûï
                    </button>
                    <button
                      className="class-detail__action-btn class-detail__action-btn--delete-lesson"
                      onClick={() => handleDeleteLesson(session)}
                      title="X√≥a b√†i h·ªçc"
                    >
                      ‚ùå
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        ) : (
          <p>Kh√¥ng c√≥ l·ªãch h·ªçc cho l·ªõp n√†y.</p>
        )}
      </div>

      {/* Modal x√°c nh·∫≠n x√≥a */}
      <ConfirmDialog
        isOpen={isDeleteModalOpen}
        title="X√≥a bu·ªïi h·ªçc"
        message="B·∫°n ch·∫Øc ch·∫Øn mu·ªën x√≥a bu·ªïi h·ªçc n√†y?"
        onConfirm={handleConfirmDeleteSession}
        onCancel={() => setIsDeleteModalOpen(false)}
      />
      <ConfirmDialog
        isOpen={showConfirmDialog.isOpen}
        title="Xo√° h·ªçc vi√™n"
        message={showConfirmDialog.message}
        onConfirm={showConfirmDialog.onConfirm}
        onCancel={showConfirmDialog.onCancel}
      />

      {/* Modal ƒë·ªÉ th√™m bu·ªïi h·ªçc */}
      <AddSessionModal
        show={isModalOpen}
        handleClose={toggleModal}
        classId={id}
        onSessionAdded={handleSessionAdded}
      />

      {/* Modal ƒë·ªÉ ch·ªânh s·ª≠a bu·ªïi h·ªçc */}
      <EditSessionModal
        show={isEditModalOpen}
        handleClose={() => setIsEditModalOpen(false)}
        session={selectedSession}
        classroomId={id}
        onSessionUpdated={(updatedSession) => {
          setClassData((prevData) => ({
            ...prevData,
            sessions: prevData.sessions.map((s) =>
              s.id === updatedSession.id ? updatedSession : s
            ),
          }));
        }}
      />

      <AddLessonModal
        show={isLessonModalOpen}
        handleClose={() => setIsLessonModalOpen(false)}
        session={selectedSessionForLesson}
        onLessonAdded={() => {
          reloadClassData();
          addToast({
            title: "Th√†nh c√¥ng!",
            message: "ƒê√£ th√™m b√†i h·ªçc v√†o bu·ªïi h·ªçc.",
            type: "success",
            duration: 2000,
          });
        }}
      />

      {/* Modal ƒë·ªÉ x√≥a b√†i h·ªçc */}
      <DeleteLessonModal
        show={isDeleteLessonModalOpen}
        handleClose={() => setIsDeleteLessonModalOpen(false)}
        session={sessionForDeletingLesson}
        onLessonDeleted={() => {
          reloadClassData();
          addToast({
            title: "Th√†nh c√¥ng!",
            message: "ƒê√£ x√≥a b√†i h·ªçc kh·ªèi bu·ªïi h·ªçc.",
            type: "success",
            duration: 2000,
          });
          setSessionForDeletingLesson(null);

          // ƒê√≥ng modal sau khi x√≥a
          setIsDeleteLessonModalOpen(false);
        }}
      />

      {/* Modal ƒë·ªÉ th√™m h·ªçc vi√™n */}
      <AddStudentModal
        show={showAddStudentModal}
        handleClose={() => setShowAddStudentModal(false)}
        classroomId={id}
        onStudentAdded={reloadClassData}
        enrolledStudents={students}
      />
    </div>
  );
};

export default DisciplineScoresDetail;
